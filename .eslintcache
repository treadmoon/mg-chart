[{"E:\\viteSpace\\mg-chart\\src\\App.tsx":"1","E:\\viteSpace\\mg-chart\\src\\data.js":"2","E:\\viteSpace\\mg-chart\\src\\main.tsx":"3","E:\\viteSpace\\mg-chart\\src\\views\\Chart.jsx":"4","E:\\viteSpace\\mg-chart\\src\\views\\utils\\gang.js":"5","E:\\viteSpace\\mg-chart\\src\\vite-env.d.ts":"6"},{"size":302,"mtime":1674006836964,"results":"7","hashOfConfig":"8"},{"size":4291,"mtime":1674005183523,"results":"9","hashOfConfig":"8"},{"size":246,"mtime":1673922989714,"results":"10","hashOfConfig":"8"},{"size":2612,"mtime":1674006833621,"results":"11","hashOfConfig":"8"},{"size":17701,"mtime":1674006068242,"results":"12","hashOfConfig":"8"},{"size":38,"mtime":1673947661422,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},"17vklju",{"filePath":"17","messages":"18","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"24"},{"filePath":"25","messages":"26","errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\viteSpace\\mg-chart\\src\\App.tsx",["30","31","32"],"import { useState, lazy, Suspense } from \"react\";\nimport \"./App.css\";\nimport { createdData, realData } from \"./data\";\n\nconst Chart = lazy(async () => import(\"./views/Chart\"));\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Chart data={realData} />\n    </div>\n  );\n}\n\nexport default App;\n","E:\\viteSpace\\mg-chart\\src\\data.js",["33"],"\r\nexport function createdData(depth, leaflen) {\r\n    let indexId = 0\r\n\r\n    let root = {\r\n        name: 'root',\r\n        id: indexId++\r\n    }\r\n\r\n    function createChild(depth) {\r\n        let len = parseInt(Math.random() * leaflen) + 1\r\n        let mustId = parseInt(Math.random() * len)\r\n        let child = null\r\n\r\n        if (depth > 0) {\r\n            child = []\r\n            depth--\r\n            for (let i = 0; i < len; i++) {\r\n                let leaf = {\r\n                    name: depth + '' + i + indexId,\r\n                    id: indexId++\r\n                }\r\n                if (i === mustId || parseInt(Math.random() * 10 + 1) % 5 == 0) {\r\n                    let leafchild = createChild(depth)\r\n                    if (leafchild) {\r\n                        leaf.children = leafchild\r\n                    }\r\n                }\r\n\r\n                child.push(leaf)\r\n            }\r\n        }\r\n        return child\r\n    }\r\n\r\n    let child = createChild(depth)\r\n    if (child) {\r\n        root.children = child\r\n    }\r\n    return root\r\n}\r\n\r\nexport const realData = {\r\n    name: \"深圳环宇科技集团有限公司\",\r\n    id: 0,\r\n    children: [{\r\n        name: \"深圳环宇科技（厦门）集团有限公司\",\r\n        id: 1,\r\n        children: [{\r\n            name: \"行政中心\",\r\n            id: 4\r\n        },\r\n        {\r\n            name: \"市场部门\",\r\n            id: 5,\r\n            preChildren: true\r\n        },\r\n        {\r\n            name: \"研发中心\",\r\n            id: 6,\r\n            children: [{\r\n                name: \"项目开发组\",\r\n                id: 12,\r\n                children: [{\r\n                    name: \"后端开发组\",\r\n                    id: 17\r\n                },\r\n                {\r\n                    name: \"前端开发组\",\r\n                    id: 18\r\n                },\r\n                {\r\n                    name: \"测试组\",\r\n                    id: 19\r\n                }\r\n                ]\r\n            },\r\n            {\r\n                name: \"运维中心\",\r\n                id: 13,\r\n                children: [{\r\n                    name: \"桌面运维\",\r\n                    id: 15\r\n                },\r\n                {\r\n                    name: \"安全运维\",\r\n                    id: 16\r\n                }\r\n                ]\r\n            },\r\n            {\r\n                name: \"服务与部署\",\r\n                id: 14\r\n            }\r\n            ]\r\n        }\r\n        ]\r\n    },\r\n    {\r\n        name: \"深圳环宇科技（广州）集团有限公司\",\r\n        id: 2,\r\n        children: [{\r\n            name: \"广州白云销售中心\",\r\n            id: 7,\r\n            children: [{\r\n                id: 27,\r\n                name: \"马智波\",\r\n                type: \"staff\"\r\n            },\r\n            {\r\n                id: 28,\r\n                name: \"李知更\",\r\n                type: \"staff\"\r\n            }\r\n            ]\r\n        },\r\n        {\r\n            id: 8,\r\n            name: \"张一桂\",\r\n            type: \"staff\",\r\n            children: [{\r\n                id: 29,\r\n                name: \"雷行者\",\r\n                type: \"staff\"\r\n            },\r\n            {\r\n                id: 30,\r\n                name: \"东哥\",\r\n                type: \"staff\"\r\n            }\r\n            ]\r\n        }\r\n        ]\r\n    },\r\n    {\r\n        name: \"深圳环宇科技（上海）集团有限公司\",\r\n        id: 3,\r\n        children: [{\r\n            name: \"上海财务中心\",\r\n            id: 9\r\n        },\r\n        {\r\n            name: \"上海招聘与薪酬中心\",\r\n            id: 10\r\n        },\r\n        {\r\n            name: \"上海市场部门\",\r\n            id: 11,\r\n            children: [{\r\n                name: \"外滩门店\",\r\n                id: 25\r\n            },\r\n            {\r\n                name: \"明珠塔门店\",\r\n                id: 26\r\n            }\r\n            ]\r\n        }\r\n        ]\r\n    },\r\n    {\r\n        name: \"深圳环宇科技（北京）集团有限公司\",\r\n        id: 21,\r\n        children: [{\r\n            name: \"北京对外办事处\",\r\n            id: 22\r\n        },\r\n        {\r\n            name: \"北京财务结算中心\",\r\n            id: 23\r\n        },\r\n        {\r\n            name: \"北京行政中心\",\r\n            id: 24\r\n        }\r\n        ]\r\n    }\r\n    ]\r\n}","E:\\viteSpace\\mg-chart\\src\\main.tsx",[],"E:\\viteSpace\\mg-chart\\src\\views\\Chart.jsx",["34","35"],"import React, { useEffect } from \"react\";\r\n\r\nimport TreeChart from \"./utils/gang\";\r\n\r\nimport \"./chart.css\";\r\n\r\nfunction Chart(props) {\r\n  const { data = null } = props;\r\n  useEffect(() => {\r\n    const kdChart = new TreeChart({\r\n      data,\r\n      htmlDom: document.getElementById(\"chartWrapper\"),\r\n      selectCardInfo: (node) =>\r\n        node.data[\"name\"].indexOf(\"公司\") >= 0 ? \"cai\" : \"normal\",\r\n      cardModel: {\r\n        width: 120,\r\n        height: 50,\r\n        rx: 20,\r\n        ry: 30,\r\n      },\r\n      cardInfo: {\r\n        normal: [\r\n          {\r\n            tag: \"text\",\r\n            text: (node) => {\r\n              return node.data.name;\r\n            },\r\n            config: {\r\n              x: 5,\r\n              y: 15,\r\n              fillStyle: (node) => {\r\n                return node.data[\"name\"].indexOf(\"公司\") >= 0\r\n                  ? \"#67C23A\"\r\n                  : \"#409EFF\";\r\n              },\r\n              fontSize: 12,\r\n              linenum: 2,\r\n            },\r\n            on: \"click\",\r\n            bind: (node) => {\r\n              // do sth\r\n              console.log(\"name:\", node.data.name);\r\n            },\r\n          },\r\n          {\r\n            tag: \"text\",\r\n            text: (node) => {\r\n              return \"哈哈哈哈哈哈洽哈哈哈\";\r\n            },\r\n            config: {\r\n              x: 5,\r\n              y: 45,\r\n              fillStyle: \"#aaa\",\r\n              fontSize: 10,\r\n              linenum: 1,\r\n            },\r\n          },\r\n        ],\r\n        cai: [\r\n          {\r\n            tag: \"text\",\r\n            text: (node) => {\r\n              return node.data.name;\r\n            },\r\n            config: {\r\n              x: 5,\r\n              y: 15,\r\n              fillStyle: (node) => {\r\n                return node.data[\"name\"].indexOf(\"公司\") >= 0\r\n                  ? \"#67C23A\"\r\n                  : \"#409EFF\";\r\n              },\r\n              fontSize: 12,\r\n              linenum: 2,\r\n            },\r\n            on: \"click\",\r\n            bind: (node) => {\r\n              // do sth\r\n              console.log(\"name:\", node.data.name);\r\n            },\r\n          },\r\n          {\r\n            tag: \"text\",\r\n            text: (node) => {\r\n              return \"嘿嘿嘿嘿嘿嘿潶嘿嘿嘿\";\r\n            },\r\n            config: {\r\n              x: 5,\r\n              y: 45,\r\n              fillStyle: \"#aaa\",\r\n              fontSize: 10,\r\n              linenum: 1,\r\n            },\r\n          },\r\n        ],\r\n      },\r\n    });\r\n\r\n    kdChart.init();\r\n  }, []);\r\n\r\n  return <div className=\"chartWrapper\" id=\"chartWrapper\"></div>;\r\n}\r\n\r\nexport default Chart;\r\n","E:\\viteSpace\\mg-chart\\src\\views\\utils\\gang.js",["36","37","38","39","40"],"import * as d3 from \"d3\";\r\n\r\nexport default class TreeChart {\r\n    constructor({\r\n        data = {},\r\n        htmlDom,\r\n        selectCardInfo,\r\n        cardModel = {},\r\n        cardInfo = {}\r\n    } = {}) {\r\n        this.data = data\r\n        this.selectCardInfo = selectCardInfo ?? (() => \"normal\")\r\n        this.cardModel = cardModel\r\n        this.cardInfo = cardInfo\r\n        this.htmlDom = htmlDom\r\n        this.animateCount = 20\r\n        this.animateStart = 1\r\n\r\n        this.colorId = 99\r\n        this.canvasObj = {\r\n            0: {\r\n                colorId: 0,\r\n                tag: \"canvas\",\r\n                on: \"\"\r\n            }\r\n        }\r\n\r\n        this.initData()\r\n        this.initNode()\r\n    }\r\n    init() {\r\n        this.initChart()\r\n    }\r\n    initData() {\r\n        this.tree = d3.tree().nodeSize([this.cardModel.width + this.cardModel.rx, this.cardModel.height + this.cardModel.ry])\r\n\r\n        this.canvas = new paintCanvas({\r\n            htmlDom: document.getElementById(\"chartWrapper\"),\r\n            treeChart: this\r\n        })\r\n\r\n        this.proceData(this.data)\r\n    }\r\n    proceData(obj) {\r\n        if (obj.children) {\r\n            obj._children = obj.children\r\n            obj.children.map(childobj => this.proceData(childobj))\r\n        }\r\n    }\r\n    initNode() {\r\n        this.root = d3.hierarchy(this.data);\r\n        this.tree(this.root)\r\n        this.nodes = this.root.descendants()\r\n        this.links = this.root.links()\r\n\r\n        console.log(\"节点数：\", this.nodes.length);\r\n\r\n        this.nodes.forEach(node => {\r\n            node.id = node.data.id\r\n\r\n            node.y -= (this.htmlDom.offsetHeight / 2 - this.cardModel.height)\r\n            node._children = node.children\r\n\r\n            node.x0 = node.x\r\n            node.y0 = node.y\r\n        })\r\n    }\r\n    initChart() {\r\n        this.links.forEach(link => {\r\n            this.canvas.path({\r\n                x: link.source.x + this.cardModel.width / 2,\r\n                y: link.source.y + this.cardModel.height\r\n            }, {\r\n                x: link.target.x + this.cardModel.width / 2,\r\n                y: link.target.y\r\n            }, \"#ccc\")\r\n        })\r\n        this.nodes.forEach(node => {\r\n            this.paintCard(node)\r\n        })\r\n    }\r\n    upChart() {\r\n        this.colorId = 99\r\n        this.canvasObj = {\r\n            0: {\r\n                colorId: 0,\r\n                tag: \"canvas\",\r\n                on: \"\"\r\n            }\r\n        }\r\n        this.canvas.clearRectCanvas()\r\n        this.initChart()\r\n    }\r\n    toogleNode(currNode) {\r\n        //是否折叠\r\n        let fold = !!currNode.children\r\n        //当前node的对象\r\n        let currObj = this.currDataObj(currNode, this.data)\r\n        //处理data\r\n        if (fold) {\r\n            currObj.children = null\r\n        } else {\r\n            currObj.children = currObj._children\r\n            //如果是展开，释放当前node的children\r\n            currNode.children = currNode._children\r\n            this.nodes = this.root.descendants()\r\n            this.links = this.root.links()\r\n        }\r\n\r\n        //计算data变换后的坐标点\r\n        let newRoot = d3.hierarchy(this.data);\r\n        this.tree(newRoot)\r\n        this.upNodeLoc(currNode, this.getRootObj(newRoot))\r\n        //触发动画\r\n        this.animateNode(currNode, fold)\r\n    }\r\n    selectCard(node) {\r\n        this.selectId = node ? node.id : null\r\n        this.upChart()\r\n    }\r\n    hoverToogle(node) {\r\n        this.hoverToogleId = node ? node.id : null\r\n        this.upChart()\r\n    }\r\n    animateNode(currNode, fold, startTime) {\r\n        this.stepNodeLoc(this.nodes)\r\n        if (this.animateStart >= this.animateCount) {\r\n            this.animateStart = 1\r\n            //隐藏折叠节点\r\n            if (fold) {\r\n                currNode.children = currNode.children ? null : currNode._children\r\n                this.nodes = this.root.descendants()\r\n                this.links = this.root.links()\r\n                this.upChart()\r\n            }\r\n        } else {\r\n            this.animateStart++\r\n            requestAnimationFrame(() => {\r\n                this.animateNode(currNode, fold, startTime)\r\n            })\r\n        }\r\n    }\r\n    stepNodeLoc(list) {\r\n        list.map(node => {\r\n            node.x -= node.rx / this.animateCount\r\n            node.y -= node.ry / this.animateCount\r\n        })\r\n        this.upChart()\r\n    }\r\n    upNodeLoc(currNode, newRootObj) {\r\n        this.nodes.forEach(node => {\r\n            let newNode\r\n            if (newRootObj[node.id]) {\r\n                newNode = newRootObj[node.id]\r\n                node.depth = newNode.depth\r\n                node.height = newNode.height\r\n            } else {\r\n                newNode = newRootObj[currNode.id]\r\n            }\r\n            node.x1 = newNode.x\r\n            node.y1 = newNode.y\r\n            node.rx = node.x - node.x1\r\n            node.ry = node.y - node.y1\r\n        })\r\n    }\r\n    currDataObj(node, treeData) {\r\n        let pids = this.getPids(node)\r\n        let nodeObj = treeData\r\n        let pid = pids.pop()\r\n        if (nodeObj.id === pid) {\r\n            while (pid = pids.pop()) {\r\n                nodeObj.children.map((item, i) => {\r\n                    if (item.id === pid) {\r\n                        nodeObj = item\r\n                    }\r\n                })\r\n            }\r\n        }\r\n        return nodeObj\r\n    }\r\n    getPids(node) {\r\n        let pids = []\r\n        pids.push(node.id)\r\n        while (node = node.parent) {\r\n            pids.push(node.id)\r\n        }\r\n        return pids\r\n    }\r\n    getRootObj(root) {\r\n        let rootObj = {}\r\n        root.descendants().forEach(node => {\r\n            node.id = node.data.id\r\n            node.y -= (this.htmlDom.offsetHeight / 2 - this.cardModel.height)\r\n            rootObj[node.id] = node\r\n        })\r\n        return rootObj\r\n    }\r\n    paintCard(node) {\r\n        this.paintRect(node)\r\n\r\n        this.cardInfo[this.selectCardInfo(node)].map(info => {\r\n            this.paintText(node, info)\r\n        })\r\n\r\n        this.paintToogle(node)\r\n\r\n    }\r\n    paintRect(node) {\r\n        let colorId = this.colorId++\r\n        this.canvasObj[colorId] = {\r\n            node,\r\n            colorId,\r\n            tag: \"rect\",\r\n            config: {\r\n                x: 0,\r\n                y: 0,\r\n                w: this.cardModel.width,\r\n                h: this.cardModel.height,\r\n                fillStyle: \"#fff\"\r\n            }\r\n\r\n        }\r\n        this.canvas.rect(this.canvasObj[colorId])\r\n    }\r\n    paintText(node, info) {\r\n        let colorId = this.colorId++\r\n        this.canvasObj[colorId] = {\r\n            node,\r\n            colorId,\r\n            tag: \"text\",\r\n            config: info.config,\r\n            info,\r\n        }\r\n        this.canvas.text(this.canvasObj[colorId])\r\n    }\r\n    paintToogle(node) {\r\n        if (!node._children) return\r\n        let colorId = this.colorId++\r\n        this.canvasObj[colorId] = {\r\n            node,\r\n            colorId,\r\n            tag: \"toogle\"\r\n        }\r\n        this.canvas.toogle(this.canvasObj[colorId])\r\n    }\r\n}\r\n\r\nclass paintCanvas {\r\n    constructor({\r\n        htmlDom,\r\n        treeChart\r\n    } = {}) {\r\n        this.htmlDom = htmlDom\r\n        this.treeChart = treeChart\r\n        this.initCanvas()\r\n    }\r\n    initCanvas() {\r\n        this.htmlDom.innerHTML = `\r\n        <div style=\"position: relative;\">\r\n            <canvas id=\"gangCanvas\"  style=\"opacity: 1;z-index: 1;position: absolute;left: 0;top: 0;background-color:#fff; \"></canvas>\r\n            <canvas id=\"colorCanvas\" style=\"opacity: 0;z-index: 2;position: absolute;left: 0;top: 0;\"></canvas>\r\n        </div>`\r\n\r\n        this.gangCanvas = document.getElementById(\"gangCanvas\");\r\n        this.gangCtx = this.gangCanvas.getContext(\"2d\");\r\n        this.setCanvas(this.gangCanvas, this.gangCtx)\r\n\r\n        this.colorCanvas = document.getElementById(\"colorCanvas\");\r\n        this.colorCtx = this.colorCanvas.getContext(\"2d\");\r\n        this.setCanvas(this.colorCanvas, this.colorCtx)\r\n\r\n        this.isMouseDown = false\r\n        this.zoom = 1\r\n        this.curColorId = null\r\n\r\n        this.colorCanvas.onclick = e => {\r\n            let canvasObj = this.treeChart.canvasObj[this.colorId(e)]\r\n            // toogle\r\n            this.treeChart.selectCard(canvasObj.node)\r\n\r\n            if (canvasObj.tag === \"toogle\") {\r\n                if (canvasObj.node && canvasObj.node._children) {\r\n                    this.treeChart.toogleNode(canvasObj.node)\r\n                }\r\n            }\r\n\r\n            if (canvasObj.info && canvasObj.info.on === \"click\") {\r\n                canvasObj.info.bind(canvasObj.node)\r\n            }\r\n        }\r\n\r\n        this.colorCanvas.onmousedown = e => {\r\n            // console.log(\"down\");\r\n            // this.colorCanvas.style.cursor = \"move\"\r\n            this.isMouseDown = true\r\n        }\r\n\r\n        this.colorCanvas.onmousewheel = e => {\r\n            let scale = 1 + (e.deltaY < 0 ? 0.1 : -0.1)\r\n            this.zoom *= scale\r\n            this.gangCtx.scale(scale, scale);\r\n            this.colorCtx.scale(scale, scale);\r\n            this.treeChart.upChart()\r\n        }\r\n\r\n        this.colorCanvas.onmousemove = e => {\r\n            let canvasObj = this.treeChart.canvasObj[this.colorId(e)]\r\n            let rx = e.movementX / this.zoom / this.ratio\r\n            let ry = e.movementY / this.zoom / this.ratio\r\n\r\n            if (this.isMouseDown) {\r\n                if (this.colorId(e) === 0) { //拖拽整体\r\n                    this.gangCtx.translate(rx, ry);\r\n                    this.colorCtx.translate(rx, ry);\r\n                    this.treeChart.upChart()\r\n                } else { //拖拽节点\r\n                    if (canvasObj) {\r\n                        canvasObj.node.x += rx\r\n                        canvasObj.node.y += ry\r\n                    }\r\n                    this.treeChart.upChart()\r\n                }\r\n            }\r\n\r\n            if (canvasObj && canvasObj.tag === \"canvas\") {\r\n                this.colorCanvas.style.cursor = \"default\"\r\n            } else {\r\n                this.colorCanvas.style.cursor = \"pointer\"\r\n\r\n            }\r\n\r\n            if (canvasObj && canvasObj.tag === \"toogle\") {\r\n                this.treeChart.hoverToogle(canvasObj.node)\r\n            } else {\r\n                this.treeChart.hoverToogle(null)\r\n            }\r\n\r\n        }\r\n\r\n        this.colorCanvas.onmouseup = e => {\r\n            // console.log(\"up\");\r\n            this.isMouseDown = false\r\n            this.colorCanvas.style.cursor = \"default\"\r\n        }\r\n\r\n        this.colorCanvas.onmouseout = e => {\r\n            // console.log(\"out\");\r\n            this.isMouseDown = false\r\n            this.colorCanvas.style.cursor = \"default\"\r\n        }\r\n\r\n    }\r\n    setCanvas(canvas, ctx) {\r\n        let dpr = window.devicePixelRatio || 1\r\n        let bsr = ctx['webkitBackingStorePixelRatio'] ||\r\n            ctx['mozBackingStorePixelRatio'] ||\r\n            ctx['msBackingStorePixelRatio'] ||\r\n            ctx['oBackingStorePixelRatio'] ||\r\n            ctx['backingStorePixelRatio'] || 1;\r\n        this.ratio = dpr / bsr\r\n\r\n        canvas.width = this.htmlDom.offsetWidth * this.ratio\r\n        canvas.height = this.htmlDom.offsetHeight * this.ratio\r\n\r\n        canvas.style.width = this.htmlDom.offsetWidth + \"px\"\r\n        canvas.style.height = this.htmlDom.offsetHeight + \"px\"\r\n\r\n        this.canvasLoc = {\r\n            x: canvas.width / 2 - this.treeChart.cardModel.width,\r\n            y: canvas.height / 2\r\n        }\r\n\r\n        canvas.getContext(\"2d\").setTransform(this.ratio, 0, 0, this.ratio, this.canvasLoc.x, this.canvasLoc.y);\r\n    }\r\n    clearRectCanvas() {\r\n        this.gangCtx.fillRect(-99999, -99999, 999999, 999999)\r\n        this.gangCtx.clearRect(-99999, -99999, 999999, 999999);\r\n        this.gangCtx.width = this.gangCtx.width;\r\n\r\n        this.colorCtx.fillRect(-99999, -99999, 999999, 999999)\r\n        this.colorCtx.clearRect(-99999, -99999, 999999, 999999);\r\n        this.colorCtx.width = this.colorCtx.width;\r\n    }\r\n    rect(canvasObj) {\r\n        let config = canvasObj.config\r\n        let node = canvasObj.node\r\n        let ctx = this.gangCtx\r\n        let strokeStyle = node.id == this.treeChart.selectId ? \"#38f\" : \"#fff\"\r\n\r\n        //阴影\r\n        if (node.id !== this.treeChart.selectId) {\r\n            ctx.shadowColor = '#bbb';\r\n            ctx.shadowBlur = 3;\r\n            ctx.shadowOffsetX = 1\r\n            ctx.shadowOffsetY = 1\r\n        }\r\n\r\n        //填充\r\n        // ctx.fillStyle = \"#fff\";\r\n        // ctx.fillRect(node.x + config.x, node.y + config.y, config.w, config.h);\r\n\r\n        this.drawRoundRect(ctx, node.x + config.x, node.y + config.y, config.w, config.h, 5, \"#fff\", strokeStyle)\r\n\r\n        this.paintColor({\r\n            x: node.x + config.x,\r\n            y: node.y + config.y,\r\n            colorId: canvasObj.colorId,\r\n            w: config.w,\r\n            h: config.h\r\n        })\r\n    }\r\n    text(canvasObj) {\r\n        let config = canvasObj.info.config\r\n        let node = canvasObj.node\r\n        let ctx = this.gangCtx\r\n\r\n        let linenum = config.linenum\r\n        let text = canvasObj.info.text(node)\r\n        let textBoxLen = Math.floor((this.treeChart.cardModel.width - 2 * config.x) / config.fontSize)\r\n        let textMaxLen = textBoxLen * config.linenum\r\n        let textLen = text.length\r\n\r\n        let textArr = this.getTextArr(text, textLen, textBoxLen, linenum)\r\n        ctx.font = config.fontSize + 'px Helvetica Neue,Helvetica,PingFang SC,Hiragino Sans GB,Microsoft YaHei,Noto Sans CJK SC,WenQuanYi Micro Hei,Arial,sans-serif'\r\n        ctx.fillStyle = typeof config.fillStyle === \"function\" ? config.fillStyle(node) : config.fillStyle\r\n        ctx.shadowBlur = 0;\r\n        ctx.shadowOffsetX = 0\r\n        ctx.shadowOffsetY = 0\r\n        textArr.map((txt, index) => {\r\n            ctx.fillText(txt, node.x + config.x, node.y + config.y + config.fontSize * index + (linenum - textArr.length) * config.fontSize / 2);\r\n        })\r\n\r\n        this.paintColor({\r\n            x: node.x + config.x,\r\n            y: node.y + config.y - config.fontSize + (linenum - textArr.length) * config.fontSize / 2,\r\n            colorId: canvasObj.colorId,\r\n            w: textLen < textBoxLen ? textLen * config.fontSize : textBoxLen * config.fontSize,\r\n            h: config.fontSize * 1.2 * textArr.length\r\n        })\r\n    }\r\n    getTextArr(text, textLen, textBoxLen, linenum) {\r\n        let res = []\r\n        let start = 0\r\n        linenum--\r\n        while (textLen > textBoxLen) {\r\n            res.push(text.slice(start, start + textBoxLen))\r\n            textLen -= textBoxLen\r\n            start += textBoxLen\r\n        }\r\n        res.push(text.slice(start, start + textBoxLen))\r\n        if (res[linenum] && res[linenum].length === textBoxLen) {\r\n            res[linenum] = res[linenum].slice(0, textBoxLen - 2) + \"……\"\r\n        }\r\n        return res.splice(0, linenum + 1)\r\n    }\r\n    toogle(canvasObj) {\r\n        let node = canvasObj.node\r\n        let ctx = this.gangCtx\r\n        let r = 8\r\n        let arcX = node.x + this.treeChart.cardModel.width / 2\r\n        let arcY = node.y + this.treeChart.cardModel.height\r\n\r\n        let strokeStyle = node.id === this.treeChart.hoverToogleId ? \"#555\" : \"#aaa\"\r\n        //圆\r\n        ctx.beginPath();\r\n        ctx.arc(arcX, arcY, r, 0, Math.PI * 2, true);\r\n        ctx.fillStyle = \"#fff\";\r\n        ctx.fill();\r\n        ctx.strokeStyle = strokeStyle;\r\n        ctx.stroke()\r\n\r\n        //横线\r\n        ctx.beginPath();\r\n        ctx.moveTo(arcX - r / 2, arcY);\r\n        ctx.lineTo(arcX + r / 2, arcY)\r\n        ctx.stroke();\r\n\r\n        //竖线\r\n        if (!node.children) {\r\n            ctx.beginPath();\r\n            ctx.moveTo(arcX, arcY - r / 2);\r\n            ctx.lineTo(arcX, arcY + r / 2)\r\n            ctx.stroke();\r\n        }\r\n\r\n        let colorR = r\r\n        this.paintColor({\r\n            x: arcX - colorR,\r\n            y: arcY - colorR,\r\n            colorId: canvasObj.colorId,\r\n            w: colorR * 2,\r\n            h: colorR * 2\r\n        })\r\n\r\n    }\r\n    path(s, t, color) {\r\n        let ctx = this.gangCtx\r\n\r\n        ctx.beginPath();\r\n        ctx.strokeStyle = color;\r\n        ctx.moveTo(s.x, s.y);\r\n        ctx.lineTo(s.x, s.y + (t.y - s.y) / 2);\r\n        ctx.lineTo(t.x, s.y + (t.y - s.y) / 2);\r\n        ctx.lineTo(t.x, t.y);\r\n        ctx.stroke();\r\n    }\r\n    drawRoundRect(ctx, x, y, width, height, radius, fillStyle, strokeStyle) {\r\n        ctx.beginPath();\r\n        ctx.arc(x + radius, y + radius, radius, Math.PI, Math.PI * 3 / 2);\r\n        ctx.lineTo(width - radius + x, y);\r\n        ctx.arc(width - radius + x, radius + y, radius, Math.PI * 3 / 2, Math.PI * 2);\r\n        ctx.lineTo(width + x, height + y - radius);\r\n        ctx.arc(width - radius + x, height - radius + y, radius, 0, Math.PI * 1 / 2);\r\n        ctx.lineTo(radius + x, height + y);\r\n        ctx.arc(radius + x, height - radius + y, radius, Math.PI * 1 / 2, Math.PI);\r\n        ctx.closePath();\r\n\r\n        ctx.strokeStyle = strokeStyle;\r\n        ctx.stroke();\r\n\r\n        ctx.fillStyle = fillStyle;\r\n        ctx.fill();\r\n    }\r\n    paintColor(param) {\r\n        //填充\r\n        this.colorCtx.fillStyle = this.utilColor(param.colorId);\r\n        this.colorCtx.fillRect(param.x, param.y, param.w, param.h);\r\n    }\r\n    utilColor(colorId) {\r\n        let r = Math.floor(colorId / 255 / 255)\r\n        colorId -= r * 255 * 255\r\n        let g = Math.floor(colorId / 255)\r\n        colorId -= g * 255\r\n        let b = colorId\r\n        return `rgba(${r},${g},${b},1)`\r\n    }\r\n    colorId(e) {\r\n        let imgData = this.colorCtx.getImageData(e.offsetX * this.ratio, e.offsetY * this.ratio, 1, 1);\r\n        return imgData.data[0] * 255 * 255 + imgData.data[1] * 255 + imgData.data[2]\r\n    }\r\n}","E:\\viteSpace\\mg-chart\\src\\vite-env.d.ts",[],{"ruleId":"41","severity":2,"message":"42","line":1,"column":10,"nodeType":"43","messageId":"44","endLine":1,"endColumn":18},{"ruleId":"41","severity":2,"message":"45","line":1,"column":26,"nodeType":"43","messageId":"44","endLine":1,"endColumn":34},{"ruleId":"41","severity":2,"message":"46","line":3,"column":10,"nodeType":"43","messageId":"44","endLine":3,"endColumn":21},{"ruleId":"47","severity":2,"message":"48","line":17,"column":13,"nodeType":"43","messageId":"49","endLine":17,"endColumn":18},{"ruleId":"50","severity":1,"message":"51","line":100,"column":6,"nodeType":"52","endLine":100,"endColumn":8,"suggestions":"53"},{"ruleId":"54","severity":1,"message":"55","line":102,"column":10,"nodeType":"56","messageId":"57","endLine":102,"endColumn":58,"fix":"58"},{"ruleId":"47","severity":2,"message":"59","line":184,"column":16,"nodeType":"43","messageId":"49","endLine":184,"endColumn":20},{"ruleId":"47","severity":2,"message":"60","line":444,"column":9,"nodeType":"43","messageId":"49","endLine":444,"endColumn":16},{"ruleId":"47","severity":2,"message":"61","line":447,"column":13,"nodeType":"43","messageId":"49","endLine":447,"endColumn":20},{"ruleId":"47","severity":2,"message":"62","line":531,"column":9,"nodeType":"43","messageId":"49","endLine":531,"endColumn":16},{"ruleId":"47","severity":2,"message":"62","line":533,"column":9,"nodeType":"43","messageId":"49","endLine":533,"endColumn":16},"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Suspense' is defined but never used.","'createdData' is defined but never used.","no-param-reassign","Assignment to function parameter 'depth'.","assignmentToFunctionParam","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'data'. Either include it or remove the dependency array.","ArrayExpression",["63"],"react/self-closing-comp","Empty components are self-closing","JSXOpeningElement","notSelfClosing",{"range":"64","text":"65"},"Assignment to function parameter 'node'.","Assignment to function parameter 'linenum'.","Assignment to function parameter 'textLen'.","Assignment to function parameter 'colorId'.",{"desc":"66","fix":"67"},[2522,2529]," />","Update the dependencies array to be: [data]",{"range":"68","text":"69"},[2458,2460],"[data]"]